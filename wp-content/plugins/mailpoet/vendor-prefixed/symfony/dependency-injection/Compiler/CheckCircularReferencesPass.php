<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Compiler; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\ContainerBuilder; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException; class CheckCircularReferencesPass implements CompilerPassInterface { private $currentPath; private $checkedNodes; public function process(ContainerBuilder $container) { $graph = $container->getCompiler()->getServiceReferenceGraph(); $this->checkedNodes = []; foreach ($graph->getNodes() as $id => $node) { $this->currentPath = [$id]; $this->checkOutEdges($node->getOutEdges()); } } private function checkOutEdges(array $edges) { foreach ($edges as $edge) { $node = $edge->getDestNode(); $id = $node->getId(); if (empty($this->checkedNodes[$id])) { if (!$node->getValue() || !$edge->isLazy() && !$edge->isWeak()) { $searchKey = \array_search($id, $this->currentPath); $this->currentPath[] = $id; if (\false !== $searchKey) { throw new ServiceCircularReferenceException($id, \array_slice($this->currentPath, $searchKey)); } $this->checkOutEdges($node->getOutEdges()); } $this->checkedNodes[$id] = \true; \array_pop($this->currentPath); } } } } 