<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Loader\Configurator; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\Definition; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException; abstract class AbstractServiceConfigurator extends AbstractConfigurator { protected $parent; protected $id; private $defaultTags = []; public function __construct(ServicesConfigurator $parent, Definition $definition, string $id = null, array $defaultTags = []) { $this->parent = $parent; $this->definition = $definition; $this->id = $id; $this->defaultTags = $defaultTags; } public function __destruct() { foreach ($this->defaultTags as $name => $attributes) { foreach ($attributes as $attributes) { $this->definition->addTag($name, $attributes); } } $this->defaultTags = []; } public final function set(?string $id, string $class = null) : ServiceConfigurator { $this->__destruct(); return $this->parent->set($id, $class); } public final function alias(string $id, string $referencedId) : AliasConfigurator { $this->__destruct(); return $this->parent->alias($id, $referencedId); } public final function load(string $namespace, string $resource) : PrototypeConfigurator { $this->__destruct(); return $this->parent->load($namespace, $resource); } public final function get(string $id) : ServiceConfigurator { $this->__destruct(); return $this->parent->get($id); } public final function __invoke(string $id, string $class = null) : ServiceConfigurator { $this->__destruct(); return $this->parent->set($id, $class); } } 