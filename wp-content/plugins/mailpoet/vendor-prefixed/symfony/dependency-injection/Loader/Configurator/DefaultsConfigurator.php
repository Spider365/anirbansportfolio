<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\Loader\Configurator; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\Definition; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; class DefaultsConfigurator extends AbstractServiceConfigurator { use Traits\AutoconfigureTrait; use Traits\AutowireTrait; use Traits\BindTrait; use Traits\PublicTrait; public const FACTORY = 'defaults'; private $path; public function __construct(ServicesConfigurator $parent, Definition $definition, string $path = null) { parent::__construct($parent, $definition, null, []); $this->path = $path; } public final function tag(string $name, array $attributes = []) : self { if ('' === $name) { throw new InvalidArgumentException('The tag name in "_defaults" must be a non-empty string.'); } foreach ($attributes as $attribute => $value) { if (null !== $value && !\is_scalar($value)) { throw new InvalidArgumentException(\sprintf('Tag "%s", attribute "%s" in "_defaults" must be of a scalar-type.', $name, $attribute)); } } $this->definition->addTag($name, $attributes); return $this; } public final function instanceof(string $fqcn) : InstanceofConfigurator { return $this->parent->instanceof($fqcn); } } 